/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Initiator, InitiatorInterface } from "../Initiator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getSubscribers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_subscriber",
        type: "address",
      },
    ],
    name: "getSubscription",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "validUntil",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "validAfter",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentInterval",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "subscriber",
            type: "address",
          },
          {
            internalType: "address",
            name: "initiator",
            type: "address",
          },
          {
            internalType: "bool",
            name: "erc20TokensValid",
            type: "bool",
          },
          {
            internalType: "address",
            name: "erc20Token",
            type: "address",
          },
        ],
        internalType: "struct ISubExecutor.SubStorage",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_subscriber",
        type: "address",
      },
    ],
    name: "initiatePayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_subscriber",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_validUntil",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_paymentInterval",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_erc20Token",
        type: "address",
      },
    ],
    name: "registerSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_subscriber",
        type: "address",
      },
    ],
    name: "removeSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "subscribers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "subscriptionBySubscriber",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "validUntil",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "validAfter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "paymentInterval",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "erc20TokensValid",
        type: "bool",
      },
      {
        internalType: "address",
        name: "erc20Token",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610da6806100826000396000f3fe6080604052600436106100ab5760003560e01c8063803cc68211610064578063803cc682146102c15780638da5cb5b14610381578063b7b60fa11461039f578063e086e5ec146103bf578063f2fde38b146103d4578063f4f3b200146103f457600080fd5b806305cc61ad146100b75780630cbebc24146100e257806359221a68146102325780635d2052a81461026a578063715018a61461028c5780637cfd2743146102a157600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100cc610414565b6040516100d99190610c77565b60405180910390f35b3480156100ee57600080fd5b506101c36100fd366004610ce0565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152506001600160a01b0390811660009081526002602081815260409283902083516101008101855281548152600182015492810192909252918201549281019290925260038101546060830152600481015483166080830152600581015480841660a0840152600160a01b900460ff16151560c08301526006015490911660e082015290565b6040516100d99190815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b039081169183019190915260a08084015182169083015260c08084015115159083015260e09283015116918101919091526101000190565b34801561023e57600080fd5b5061025261024d366004610d02565b610476565b6040516001600160a01b0390911681526020016100d9565b34801561027657600080fd5b5061028a610285366004610ce0565b6104a0565b005b34801561029857600080fd5b5061028a610579565b3480156102ad57600080fd5b5061028a6102bc366004610ce0565b61058d565b3480156102cd57600080fd5b506103346102dc366004610ce0565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600690950154939594929391926001600160a01b039182169282821692600160a01b90920460ff16911688565b6040805198895260208901979097529587019490945260608601929092526001600160a01b03908116608086015290811660a085015290151560c08401521660e0820152610100016100d9565b34801561038d57600080fd5b506000546001600160a01b0316610252565b3480156103ab57600080fd5b5061028a6103ba366004610d1b565b610752565b3480156103cb57600080fd5b5061028a6109b6565b3480156103e057600080fd5b5061028a6103ef366004610ce0565b6109f8565b34801561040057600080fd5b5061028a61040f366004610ce0565b610a6e565b6060600380548060200260200160405190810160405280929190818152602001828054801561046c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161044e575b5050505050905090565b6003818154811061048657600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b038216146105135760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792074686520737562736372696265722063616e2072656d6f7665206160448201526c1039bab139b1b934b83a34b7b760991b60648201526084015b60405180910390fd5b6001600160a01b0316600090815260026020819052604082208281556001810183905590810182905560038101919091556004810180546001600160a01b03199081169091556005820180546001600160a81b0319169055600690910180549091169055565b610581610b74565b61058b6000610bce565b565b610595610c1e565b6001600160a01b0381166000908152600260205260409020600181015442106106005760405162461bcd60e51b815260206004820152601a60248201527f537562736372697074696f6e206973206e6f7420616374697665000000000000604482015260640161050a565b428160020154106106535760405162461bcd60e51b815260206004820152601a60248201527f537562736372697074696f6e206973206e6f7420616374697665000000000000604482015260640161050a565b805461069c5760405162461bcd60e51b81526020600482015260186024820152770537562736372697074696f6e20616d6f756e7420697320360441b604482015260640161050a565b60008160030154116106e85760405162461bcd60e51b815260206004820152601560248201527405061796d656e7420696e74657276616c206973203605c1b604482015260640161050a565b600480820154604080516311040e0960e11b815290516001600160a01b03909216926322081c1292828201926000929082900301818387803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b505050505061074f60018055565b50565b6000841161079d5760405162461bcd60e51b81526020600482015260186024820152770537562736372697074696f6e20616d6f756e7420697320360441b604482015260640161050a565b600082116107e55760405162461bcd60e51b815260206004820152601560248201527405061796d656e7420696e74657276616c206973203605c1b604482015260640161050a565b336001600160a01b038616146108555760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520737562736372696265722063616e20726567697374657260448201526e10309039bab139b1b934b83a34b7b760891b606482015260840161050a565b6000604051806101000160405280868152602001858152602001428152602001848152602001876001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316846001600160a01b0316146108ba5760016108bd565b60005b151581526001600160a01b0393841660209182015296831660008181526002808a526040808320855181559a8501516001808d019190915590850151918b019190915560608401516003808c0191909155608085015160048c0180549189166001600160a01b031992831617905560a086015160058d01805460c08901511515600160a01b026001600160a81b0319909116928b169290921791909117905560e0909501516006909b0180549b9097169a85169a909a1790955588549485018955979097527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092018054909216909517905550505050565b6109be610b74565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561074f573d6000803e3d6000fd5b610a00610b74565b6001600160a01b038116610a655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050a565b61074f81610bce565b610a76610b74565b806001600160a01b03811663a9059cbb610a986000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190610d6b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f9190610d84565b505050565b6000546001600160a01b0316331461058b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610c705760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161050a565b6002600155565b6020808252825182820181905260009190848201906040850190845b81811015610cb85783516001600160a01b031683529284019291840191600101610c93565b50909695505050505050565b80356001600160a01b0381168114610cdb57600080fd5b919050565b600060208284031215610cf257600080fd5b610cfb82610cc4565b9392505050565b600060208284031215610d1457600080fd5b5035919050565b600080600080600060a08688031215610d3357600080fd5b610d3c86610cc4565b9450602086013593506040860135925060608601359150610d5f60808701610cc4565b90509295509295909350565b600060208284031215610d7d57600080fd5b5051919050565b600060208284031215610d9657600080fd5b81518015158114610cfb57600080fd";

type InitiatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitiatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Initiator__factory extends ContractFactory {
  constructor(...args: InitiatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Initiator> {
    return super.deploy(overrides || {}) as Promise<Initiator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Initiator {
    return super.attach(address) as Initiator;
  }
  override connect(signer: Signer): Initiator__factory {
    return super.connect(signer) as Initiator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitiatorInterface {
    return new utils.Interface(_abi) as InitiatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Initiator {
    return new Contract(address, _abi, signerOrProvider) as Initiator;
  }
}
