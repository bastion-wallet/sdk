/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ECDSAValidator,
  ECDSAValidatorInterface,
} from "../ECDSAValidator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "kernel",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ecdsaValidatorStorage",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "enable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "_userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610863806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630c9595561461005c57806320709efc14610071578063333daf92146100b75780633a871cdd146100d85780638fc925aa146100eb575b600080fd5b61006f61006a36600461069c565b61011a565b005b61009a61007f3660046106de565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ca6100c5366004610707565b61019a565b6040519081526020016100ae565b6100ca6100e6366004610753565b610297565b61006f6100f936600461069c565b505033600090815260208190526040902080546001600160a01b0319169055565b600061012960148284866107a7565b610132916107d1565b3360008181526020819052604080822080546001600160a01b0319811660609690961c95861790915590519394506001600160a01b0316928492849290917f381c0d11398486654573703c51ee8210ce9461764d133f9f0e53b6a5397053319190a450505050565b33600090815260208181526040808320548151601f86018490048402810184019092528482526001600160a01b0316916101f0918791879087908190840183828082843760009201919091525061038892505050565b6001600160a01b0316816001600160a01b031603610212576000915050610290565b600061021d866103ac565b905060006102618287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038892505050565b9050806001600160a01b0316836001600160a01b0316146102885760019350505050610290565b600093505050505b9392505050565b60008080806102a960208801886106de565b6001600160a01b039081168252602082019290925260400160002054169050610314846102da610140880188610806565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038892505050565b6001600160a01b0316816001600160a01b031603610336576000915050610290565b6000610341856103ac565b90506000610357826102da6101408a018a610806565b9050806001600160a01b0316836001600160a01b03161461037e5760019350505050610290565b5050509392505050565b600080600061039785856103ff565b915091506103a481610444565b509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60008082516041036104355760208301516040840151606085015160001a61042987828585610596565b9450945050505061043d565b506000905060025b9250929050565b60008160048111156104585761045861084d565b036104605750565b60018160048111156104745761047461084d565b036104c65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156104da576104da61084d565b036105275760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104bd565b600381600481111561053b5761053b61084d565b036105935760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104bd565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156105cd5750600090506003610651565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610621573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661064a57600060019250925050610651565b9150600090505b94509492505050565b60008083601f84011261066c57600080fd5b50813567ffffffffffffffff81111561068457600080fd5b60208301915083602082850101111561043d57600080fd5b600080602083850312156106af57600080fd5b823567ffffffffffffffff8111156106c657600080fd5b6106d28582860161065a565b90969095509350505050565b6000602082840312156106f057600080fd5b81356001600160a01b038116811461029057600080fd5b60008060006040848603121561071c57600080fd5b83359250602084013567ffffffffffffffff81111561073a57600080fd5b6107468682870161065a565b9497909650939450505050565b60008060006060848603121561076857600080fd5b833567ffffffffffffffff81111561077f57600080fd5b8401610160818703121561079257600080fd5b95602085013595506040909401359392505050565b600080858511156107b757600080fd5b838611156107c457600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156107fe5780818660140360031b1b83161692505b505092915050565b6000808335601e1984360301811261081d57600080fd5b83018035915067ffffffffffffffff82111561083857600080fd5b60200191503681900382131561043d57600080fd5b634e487b7160e01b600052602160045260246000fd";

type ECDSAValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAValidator__factory extends ContractFactory {
  constructor(...args: ECDSAValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ECDSAValidator> {
    return super.deploy(overrides || {}) as Promise<ECDSAValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ECDSAValidator {
    return super.attach(address) as ECDSAValidator;
  }
  override connect(signer: Signer): ECDSAValidator__factory {
    return super.connect(signer) as ECDSAValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAValidatorInterface {
    return new utils.Interface(_abi) as ECDSAValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECDSAValidator {
    return new Contract(address, _abi, signerOrProvider) as ECDSAValidator;
  }
}
