/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ISubExecutor {
  export type SubStorageStruct = {
    amount: PromiseOrValue<BigNumberish>;
    validUntil: PromiseOrValue<BigNumberish>;
    validAfter: PromiseOrValue<BigNumberish>;
    paymentInterval: PromiseOrValue<BigNumberish>;
    subscriber: PromiseOrValue<string>;
    initiator: PromiseOrValue<string>;
    erc20TokensValid: PromiseOrValue<boolean>;
    erc20Token: PromiseOrValue<string>;
  };

  export type SubStorageStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    string
  ] & {
    amount: BigNumber;
    validUntil: BigNumber;
    validAfter: BigNumber;
    paymentInterval: BigNumber;
    subscriber: string;
    initiator: string;
    erc20TokensValid: boolean;
    erc20Token: string;
  };
}

export interface InitiatorInterface extends utils.Interface {
  functions: {
    "getSubscribers()": FunctionFragment;
    "getSubscription(address)": FunctionFragment;
    "initiatePayment(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerSubscription(address,uint256,uint256,uint256,address)": FunctionFragment;
    "removeSubscription(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "subscribers(uint256)": FunctionFragment;
    "subscriptionBySubscriber(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSubscribers"
      | "getSubscription"
      | "initiatePayment"
      | "owner"
      | "registerSubscription"
      | "removeSubscription"
      | "renounceOwnership"
      | "subscribers"
      | "subscriptionBySubscriber"
      | "transferOwnership"
      | "withdrawERC20"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSubscribers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiatePayment",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionBySubscriber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiatePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionBySubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Initiator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InitiatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSubscribers(overrides?: CallOverrides): Promise<[string[]]>;

    getSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ISubExecutor.SubStorageStructOutput]>;

    initiatePayment(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerSubscription(
      _subscriber: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _paymentInterval: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    subscriptionBySubscriber(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        string
      ] & {
        amount: BigNumber;
        validUntil: BigNumber;
        validAfter: BigNumber;
        paymentInterval: BigNumber;
        subscriber: string;
        initiator: string;
        erc20TokensValid: boolean;
        erc20Token: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getSubscribers(overrides?: CallOverrides): Promise<string[]>;

  getSubscription(
    _subscriber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ISubExecutor.SubStorageStructOutput>;

  initiatePayment(
    _subscriber: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerSubscription(
    _subscriber: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _validUntil: PromiseOrValue<BigNumberish>,
    _paymentInterval: PromiseOrValue<BigNumberish>,
    _erc20Token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSubscription(
    _subscriber: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  subscriptionBySubscriber(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      string
    ] & {
      amount: BigNumber;
      validUntil: BigNumber;
      validAfter: BigNumber;
      paymentInterval: BigNumber;
      subscriber: string;
      initiator: string;
      erc20TokensValid: boolean;
      erc20Token: string;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSubscribers(overrides?: CallOverrides): Promise<string[]>;

    getSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ISubExecutor.SubStorageStructOutput>;

    initiatePayment(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerSubscription(
      _subscriber: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _paymentInterval: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    subscriptionBySubscriber(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        string
      ] & {
        amount: BigNumber;
        validUntil: BigNumber;
        validAfter: BigNumber;
        paymentInterval: BigNumber;
        subscriber: string;
        initiator: string;
        erc20TokensValid: boolean;
        erc20Token: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getSubscribers(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiatePayment(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerSubscription(
      _subscriber: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _paymentInterval: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionBySubscriber(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSubscribers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiatePayment(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSubscription(
      _subscriber: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _validUntil: PromiseOrValue<BigNumberish>,
      _paymentInterval: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSubscription(
      _subscriber: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionBySubscriber(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
