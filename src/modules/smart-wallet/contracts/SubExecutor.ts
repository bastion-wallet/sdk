/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PaymentRecordStruct = {
  amount: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
  subscriber: PromiseOrValue<string>;
};

export type PaymentRecordStructOutput = [BigNumber, BigNumber, string] & {
  amount: BigNumber;
  timestamp: BigNumber;
  subscriber: string;
};

export type SubStorageStruct = {
  amount: PromiseOrValue<BigNumberish>;
  validUntil: PromiseOrValue<BigNumberish>;
  validAfter: PromiseOrValue<BigNumberish>;
  paymentInterval: PromiseOrValue<BigNumberish>;
  paymentLimit: PromiseOrValue<BigNumberish>;
  subscriber: PromiseOrValue<string>;
  initiator: PromiseOrValue<string>;
  erc20TokensValid: PromiseOrValue<boolean>;
  erc20Token: PromiseOrValue<string>;
};

export type SubStorageStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean,
  string
] & {
  amount: BigNumber;
  validUntil: BigNumber;
  validAfter: BigNumber;
  paymentInterval: BigNumber;
  paymentLimit: BigNumber;
  subscriber: string;
  initiator: string;
  erc20TokensValid: boolean;
  erc20Token: string;
};

export interface SubExecutorInterface extends utils.Interface {
  functions: {
    "createSubscription(address,uint256,uint256,uint256,address)": FunctionFragment;
    "getLastPaidTimestamp(address)": FunctionFragment;
    "getPaymentHistory(address)": FunctionFragment;
    "getSubscription(address)": FunctionFragment;
    "modifySubscription(address,uint256,uint256,uint256,address)": FunctionFragment;
    "processPayment()": FunctionFragment;
    "revokeSubscription(address,uint256,uint256)": FunctionFragment;
    "updateAllowance(uint256)": FunctionFragment;
    "withdrawERC20Tokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSubscription"
      | "getLastPaidTimestamp"
      | "getPaymentHistory"
      | "getSubscription"
      | "modifySubscription"
      | "processPayment"
      | "revokeSubscription"
      | "updateAllowance"
      | "withdrawERC20Tokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastPaidTimestamp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifySubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Tokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPaidTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Tokens",
    data: BytesLike
  ): Result;

  events: {
    "paymentProcessed(address,uint256)": EventFragment;
    "preApproval(address,uint256)": EventFragment;
    "revokedApproval(address)": EventFragment;
    "subscriptionCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "paymentProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "preApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "revokedApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "subscriptionCreated"): EventFragment;
}

export interface paymentProcessedEventObject {
  _subscriber: string;
  _amount: BigNumber;
}
export type paymentProcessedEvent = TypedEvent<
  [string, BigNumber],
  paymentProcessedEventObject
>;

export type paymentProcessedEventFilter =
  TypedEventFilter<paymentProcessedEvent>;

export interface preApprovalEventObject {
  _subscriber: string;
  _amount: BigNumber;
}
export type preApprovalEvent = TypedEvent<
  [string, BigNumber],
  preApprovalEventObject
>;

export type preApprovalEventFilter = TypedEventFilter<preApprovalEvent>;

export interface revokedApprovalEventObject {
  _subscriber: string;
}
export type revokedApprovalEvent = TypedEvent<
  [string],
  revokedApprovalEventObject
>;

export type revokedApprovalEventFilter = TypedEventFilter<revokedApprovalEvent>;

export interface subscriptionCreatedEventObject {
  _initiator: string;
  _subscriber: string;
  _amount: BigNumber;
}
export type subscriptionCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  subscriptionCreatedEventObject
>;

export type subscriptionCreatedEventFilter =
  TypedEventFilter<subscriptionCreatedEvent>;

export interface SubExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLastPaidTimestamp(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPaymentHistory(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PaymentRecordStructOutput[]]>;

    getSubscription(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SubStorageStructOutput]>;

    modifySubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllowance(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20Tokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createSubscription(
    _initiator: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interval: PromiseOrValue<BigNumberish>,
    _paymentLimit: PromiseOrValue<BigNumberish>,
    _erc20Token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLastPaidTimestamp(
    _initiator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentHistory(
    _initiator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PaymentRecordStructOutput[]>;

  getSubscription(
    _initiator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SubStorageStructOutput>;

  modifySubscription(
    _initiator: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interval: PromiseOrValue<BigNumberish>,
    _paymentLimit: PromiseOrValue<BigNumberish>,
    _erc20Token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPayment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSubscription(
    _initiator: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllowance(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20Tokens(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastPaidTimestamp(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentHistory(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PaymentRecordStructOutput[]>;

    getSubscription(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SubStorageStructOutput>;

    modifySubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPayment(overrides?: CallOverrides): Promise<void>;

    revokeSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowance(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20Tokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "paymentProcessed(address,uint256)"(
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): paymentProcessedEventFilter;
    paymentProcessed(
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): paymentProcessedEventFilter;

    "preApproval(address,uint256)"(
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): preApprovalEventFilter;
    preApproval(
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): preApprovalEventFilter;

    "revokedApproval(address)"(
      _subscriber?: PromiseOrValue<string> | null
    ): revokedApprovalEventFilter;
    revokedApproval(
      _subscriber?: PromiseOrValue<string> | null
    ): revokedApprovalEventFilter;

    "subscriptionCreated(address,address,uint256)"(
      _initiator?: PromiseOrValue<string> | null,
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): subscriptionCreatedEventFilter;
    subscriptionCreated(
      _initiator?: PromiseOrValue<string> | null,
      _subscriber?: PromiseOrValue<string> | null,
      _amount?: null
    ): subscriptionCreatedEventFilter;
  };

  estimateGas: {
    createSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLastPaidTimestamp(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentHistory(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifySubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllowance(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20Tokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLastPaidTimestamp(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentHistory(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifySubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      _paymentLimit: PromiseOrValue<BigNumberish>,
      _erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSubscription(
      _initiator: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowance(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20Tokens(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
